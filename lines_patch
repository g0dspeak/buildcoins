diff --git a/src/CryptoNoteConfig.h b/src/CryptoNoteConfig.h
index 001c4b9..e16b3cc 100644
--- a/src/CryptoNoteConfig.h
+++ b/src/CryptoNoteConfig.h
@@ -124,7 +124,7 @@ const size_t   P2P_LOCAL_WHITE_PEERLIST_LIMIT                =  1000;
 const size_t   P2P_LOCAL_GRAY_PEERLIST_LIMIT                 =  5000;
 
 const size_t   P2P_CONNECTION_MAX_WRITE_BUFFER_SIZE          = 32 * 1024 * 1024; // 32 MB
-const uint32_t P2P_DEFAULT_CONNECTIONS_COUNT                 = 8;
+const uint32_t P2P_DEFAULT_CONNECTIONS_COUNT                 = 32;
 const size_t   P2P_DEFAULT_WHITELIST_CONNECTIONS_PERCENT     = 70;
 const uint32_t P2P_DEFAULT_HANDSHAKE_INTERVAL                = 60;            // seconds
 const uint32_t P2P_DEFAULT_PACKET_MAX_SIZE                   = 50000000;      // 50000000 bytes maximum packet size
diff --git a/src/P2p/NetNode.cpp b/src/P2p/NetNode.cpp
index e01ca52..9566e3f 100644
--- a/src/P2p/NetNode.cpp
+++ b/src/P2p/NetNode.cpp
@@ -485,8 +485,6 @@ std::string print_peerlist_to_string(const std::list<PeerlistEntry>& pl) {
     if(m_external_port)
       logger(INFO) << "External port defined as " << m_external_port;
 
-    addPortMapping(logger, m_listeningPort);
-
     return true;
   }
   //-----------------------------------------------------------------------------------
diff --git a/src/Platform/Linux/System/TcpConnection.cpp b/src/Platform/Linux/System/TcpConnection.cpp
index 6831179..c607da7 100644
--- a/src/Platform/Linux/System/TcpConnection.cpp
+++ b/src/Platform/Linux/System/TcpConnection.cpp
@@ -81,7 +81,7 @@ size_t TcpConnection::read(uint8_t* data, size_t size) {
   std::string message;
   ssize_t transferred = ::recv(connection, (void *)data, size, 0);
   if (transferred == -1) {
-    if (errno != EAGAIN  && errno != EWOULDBLOCK) {
+    if (errno != EAGAIN  ) {
       message = "recv failed, " + lastErrorMessage();
     } else {
       epoll_event connectionEvent;
@@ -177,7 +177,7 @@ std::size_t TcpConnection::write(const uint8_t* data, size_t size) {
 
   ssize_t transferred = ::send(connection, (void *)data, size, MSG_NOSIGNAL);
   if (transferred == -1) {
-    if (errno != EAGAIN  && errno != EWOULDBLOCK) {
+    if (errno != EAGAIN  ) {
       message = "send failed, " + lastErrorMessage();
     } else {
       epoll_event connectionEvent;
diff --git a/src/Platform/Linux/System/Timer.cpp b/src/Platform/Linux/System/Timer.cpp
index 3727840..70db1cf 100644
--- a/src/Platform/Linux/System/Timer.cpp
+++ b/src/Platform/Linux/System/Timer.cpp
@@ -102,7 +102,7 @@ void Timer::sleep(std::chrono::nanoseconds duration) {
         if (!timerContext->interrupted) {
           uint64_t value = 0;
           if(::read(timer, &value, sizeof value) == -1 ){
-            if(errno == EAGAIN || errno == EWOULDBLOCK) {
+            if(errno == EAGAIN ) {
               timerContext->interrupted = true;
               dispatcher->pushContext(timerContext->context);
             } else {
diff --git a/src/Transfers/BlockchainSynchronizer.cpp b/src/Transfers/BlockchainSynchronizer.cpp
index fb3762c..164dcf5 100644
--- a/src/Transfers/BlockchainSynchronizer.cpp
+++ b/src/Transfers/BlockchainSynchronizer.cpp
@@ -583,8 +583,8 @@ BlockchainSynchronizer::UpdateConsumersResult BlockchainSynchronizer::updateCons
       result.newBlockHeight = 0;
     if (result.hasNewBlocks) {
       uint32_t startOffset = result.newBlockHeight - interval.startHeight;
-    if (result.newBlockHeight == 0)
-      startOffset = 0;
+      if (result.newBlockHeight == 0)
+        startOffset = 0;
       uint32_t blockCount = static_cast<uint32_t>(blocks.size()) - startOffset;
       // update consumer
       m_logger(DEBUGGING) << "Adding blocks to consumer, consumer " << kv.first << ", start index " << result.newBlockHeight << ", count " << blockCount;
